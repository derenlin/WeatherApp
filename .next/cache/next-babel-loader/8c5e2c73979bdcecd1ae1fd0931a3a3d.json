{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from '../components/head';\nimport Form from '../components/form';\nimport Display from '../components/display';\n\nvar WeatherApp = function WeatherApp() {\n  var _useState = useState(null),\n      weatherData = _useState[0],\n      setWeather = _useState[1];\n\n  var _useState2 = useState('United States'),\n      country = _useState2[0],\n      setCountry = _useState2[1];\n\n  var _useState3 = useState(false),\n      err = _useState3[0],\n      setErr = _useState3[1];\n\n  var _useState4 = useState('imperial'),\n      unit = _useState4[0],\n      setUnit = _useState4[1];\n\n  var hours = new Date().getHours();\n  var isDayTime = hours > 6 && hours < 20;\n\n  var openWeatherCall = function openWeatherCall(city) {\n    if (city !== '') {\n      fetch(\"/openweather/city/\".concat(city, \"/\").concat(unit)).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.cod == 404) {\n          setErr('City not found');\n        } else {\n          setWeather(data);\n        } //data.name = city name\n        //data.sys.country = ISO name\n\n      });\n    } else {\n      setErr('Please enter a city');\n    }\n  };\n\n  var convert = function convert(i) {\n    if (i !== unit && weather !== null) {\n      if (i === 'metric') {\n        setUnit('imperial');\n        var newWeather = weather;\n        newWeather.data.main.temp = Math.floor(newWeather.data.main.temp) * 9 / 5 + 32;\n        setWeather(newWeather);\n      } else {\n        setUnit('metric');\n        var _newWeather = weather;\n        _newWeather.data.main.temp = (Math.floor(_newWeather.data.main.temp) - 32) * 5 / 9;\n        setWeather(_newWeather);\n      }\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    }\n  }, __jsx(Head, null), __jsx(Form, {\n    getWeatherInfo: function getWeatherInfo(city) {\n      return openWeatherCall(city);\n    },\n    error: err,\n    setError: setErr,\n    isDayTime: isDayTime\n  }), __jsx(Display, {\n    data: weatherData,\n    unit: unit,\n    setUnit: function setUnit(unitChange) {\n      return convert(unitChange);\n    },\n    isDayTime: isDayTime\n  })), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"Icons made by \", __jsx(\"a\", {\n    href: \"https://www.flaticon.com/authors/freepik\",\n    title: \"Freepik\"\n  }, \"Freepik\"), \" from \", __jsx(\"a\", {\n    href: \"https://www.flaticon.com/\",\n    title: \"Flaticon\"\n  }, \"www.flaticon.com\")));\n};\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:/Users/deren/Desktop/weather/pages/weather.js"],"names":["React","useState","Head","Form","Display","WeatherApp","weatherData","setWeather","country","setCountry","err","setErr","unit","setUnit","hours","Date","getHours","isDayTime","openWeatherCall","city","fetch","then","res","json","data","cod","convert","i","weather","newWeather","main","temp","Math","floor","display","flexDirection","unitChange","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Head from '../components/head'\r\nimport Form from '../components/form'\r\nimport Display from '../components/display'\r\n\r\nconst WeatherApp = () => {\r\n    const [weatherData, setWeather] = useState(null)\r\n    const [country, setCountry] = useState('United States')\r\n    const [err, setErr] = useState(false)\r\n    const [unit, setUnit] = useState('imperial')\r\n\r\n    const hours = (new Date()).getHours()\r\n    const isDayTime = hours > 6 && hours < 20\r\n\r\n    const openWeatherCall = (city) => {\r\n        if(city !== '') {\r\n            fetch(`/openweather/city/${city}/${unit}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if(data.cod == 404) {\r\n                    setErr('City not found')\r\n                } else {\r\n                    setWeather(data)\r\n                }\r\n                //data.name = city name\r\n                //data.sys.country = ISO name\r\n            })\r\n        } else {\r\n            setErr('Please enter a city')\r\n        }\r\n    }\r\n\r\n    const convert = (i) => {\r\n        if(i !== unit && weather !== null) {\r\n            if(i === 'metric') {\r\n                setUnit('imperial')\r\n                const newWeather = weather\r\n                newWeather.data.main.temp = ((Math.floor(newWeather.data.main.temp) * 9) / 5) + 32\r\n                setWeather(newWeather)\r\n            } else {\r\n                setUnit('metric')\r\n                const newWeather = weather\r\n                newWeather.data.main.temp = ((Math.floor(newWeather.data.main.temp) - 32) * 5) / 9\r\n                setWeather(newWeather)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <Head/>\r\n                <Form getWeatherInfo={(city) => openWeatherCall(city)} error={err} setError={setErr} isDayTime={isDayTime}/>\r\n                <Display data={weatherData} unit={unit} setUnit={(unitChange) => convert(unitChange)} isDayTime={isDayTime}/>\r\n            </div>\r\n            <div style={{textAlign: 'center'}} >Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherApp\r\n"]},"metadata":{},"sourceType":"module"}