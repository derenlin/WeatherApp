{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from '../components/head';\nimport Form from '../components/form';\nimport Display from '../components/display';\n\nconst WeatherApp = () => {\n  const {\n    0: weatherData,\n    1: setWeather\n  } = useState(null);\n  const {\n    0: country,\n    1: setCountry\n  } = useState('United States');\n  const {\n    0: err,\n    1: setErr\n  } = useState(false);\n  const {\n    0: unit,\n    1: setUnit\n  } = useState('imperial');\n  const hours = new Date().getHours();\n  const isDayTime = hours > 6 && hours < 20;\n\n  const openWeatherCall = city => {\n    if (city !== '') {\n      fetch(`/openweather/city/${city}/${unit}`).then(res => res.json()).then(data => {\n        if (data.cod == 404) {\n          setErr('City not found');\n        } else {\n          setWeather(data);\n        } //data.name = city name\n        //data.sys.country = ISO name\n\n      });\n    } else {\n      setErr('Please enter a city');\n    }\n  };\n\n  const convert = i => {\n    if (i !== unit && weather !== null) {\n      if (i === 'metric') {\n        setUnit('imperial');\n        const newWeather = weather;\n        newWeather.data.main.temp = Math.floor(newWeather.data.main.temp) * 9 / 5 + 32;\n        setWeather(newWeather);\n      } else {\n        setUnit('metric');\n        const newWeather = weather;\n        newWeather.data.main.temp = (Math.floor(newWeather.data.main.temp) - 32) * 5 / 9;\n        setWeather(newWeather);\n      }\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    }\n  }, __jsx(Head, null), __jsx(Form, {\n    getWeatherInfo: city => openWeatherCall(city),\n    error: err,\n    setError: setErr,\n    isDayTime: isDayTime\n  }), __jsx(Display, {\n    data: weatherData,\n    unit: unit,\n    setUnit: unitChange => convert(unitChange),\n    isDayTime: isDayTime\n  })), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"Icons made by \", __jsx(\"a\", {\n    href: \"https://www.flaticon.com/authors/freepik\",\n    title: \"Freepik\"\n  }, \"Freepik\"), \" from \", __jsx(\"a\", {\n    href: \"https://www.flaticon.com/\",\n    title: \"Flaticon\"\n  }, \"www.flaticon.com\")));\n};\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:/Users/deren/Desktop/weather/pages/weather.js"],"names":["React","useState","Head","Form","Display","WeatherApp","weatherData","setWeather","country","setCountry","err","setErr","unit","setUnit","hours","Date","getHours","isDayTime","openWeatherCall","city","fetch","then","res","json","data","cod","convert","i","weather","newWeather","main","temp","Math","floor","display","flexDirection","unitChange","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,eAAD,CAAtC;AACA,QAAM;AAAA,OAACS,GAAD;AAAA,OAAMC;AAAN,MAAgBV,QAAQ,CAAC,KAAD,CAA9B;AACA,QAAM;AAAA,OAACW,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAC,UAAD,CAAhC;AAEA,QAAMa,KAAK,GAAI,IAAIC,IAAJ,EAAD,CAAaC,QAAb,EAAd;AACA,QAAMC,SAAS,GAAGH,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAvC;;AAEA,QAAMI,eAAe,GAAIC,IAAD,IAAU;AAC9B,QAAGA,IAAI,KAAK,EAAZ,EAAgB;AACZC,MAAAA,KAAK,CAAE,qBAAoBD,IAAK,IAAGP,IAAK,EAAnC,CAAL,CACCS,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,YAAGA,IAAI,CAACC,GAAL,IAAY,GAAf,EAAoB;AAChBd,UAAAA,MAAM,CAAC,gBAAD,CAAN;AACH,SAFD,MAEO;AACHJ,UAAAA,UAAU,CAACiB,IAAD,CAAV;AACH,SALS,CAMV;AACA;;AACH,OAVD;AAWH,KAZD,MAYO;AACHb,MAAAA,MAAM,CAAC,qBAAD,CAAN;AACH;AACJ,GAhBD;;AAkBA,QAAMe,OAAO,GAAIC,CAAD,IAAO;AACnB,QAAGA,CAAC,KAAKf,IAAN,IAAcgB,OAAO,KAAK,IAA7B,EAAmC;AAC/B,UAAGD,CAAC,KAAK,QAAT,EAAmB;AACfd,QAAAA,OAAO,CAAC,UAAD,CAAP;AACA,cAAMgB,UAAU,GAAGD,OAAnB;AACAC,QAAAA,UAAU,CAACL,IAAX,CAAgBM,IAAhB,CAAqBC,IAArB,GAA8BC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAACL,IAAX,CAAgBM,IAAhB,CAAqBC,IAAhC,IAAwC,CAAzC,GAA8C,CAA/C,GAAoD,EAAhF;AACAxB,QAAAA,UAAU,CAACsB,UAAD,CAAV;AACH,OALD,MAKO;AACHhB,QAAAA,OAAO,CAAC,QAAD,CAAP;AACA,cAAMgB,UAAU,GAAGD,OAAnB;AACAC,QAAAA,UAAU,CAACL,IAAX,CAAgBM,IAAhB,CAAqBC,IAArB,GAA6B,CAACC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAACL,IAAX,CAAgBM,IAAhB,CAAqBC,IAAhC,IAAwC,EAAzC,IAA+C,CAAhD,GAAqD,CAAjF;AACAxB,QAAAA,UAAU,CAACsB,UAAD,CAAV;AACH;AACJ;AACJ,GAdD;;AAgBA,SACI,mBACI;AAAK,IAAA,KAAK,EAAE;AAACK,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,aAAa,EAAE;AAAjC;AAAZ,KACI,MAAC,IAAD,OADJ,EAEI,MAAC,IAAD;AAAM,IAAA,cAAc,EAAGhB,IAAD,IAAUD,eAAe,CAACC,IAAD,CAA/C;AAAuD,IAAA,KAAK,EAAET,GAA9D;AAAmE,IAAA,QAAQ,EAAEC,MAA7E;AAAqF,IAAA,SAAS,EAAEM;AAAhG,IAFJ,EAGI,MAAC,OAAD;AAAS,IAAA,IAAI,EAAEX,WAAf;AAA4B,IAAA,IAAI,EAAEM,IAAlC;AAAwC,IAAA,OAAO,EAAGwB,UAAD,IAAgBV,OAAO,CAACU,UAAD,CAAxE;AAAsF,IAAA,SAAS,EAAEnB;AAAjG,IAHJ,CADJ,EAMI;AAAK,IAAA,KAAK,EAAE;AAACoB,MAAAA,SAAS,EAAE;AAAZ;AAAZ,uBAAkD;AAAG,IAAA,IAAI,EAAC,0CAAR;AAAmD,IAAA,KAAK,EAAC;AAAzD,eAAlD,YAAsI;AAAG,IAAA,IAAI,EAAC,2BAAR;AAAoC,IAAA,KAAK,EAAC;AAA1C,wBAAtI,CANJ,CADJ;AAUH,CArDD;;AAuDA,eAAehC,UAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport Head from '../components/head'\r\nimport Form from '../components/form'\r\nimport Display from '../components/display'\r\n\r\nconst WeatherApp = () => {\r\n    const [weatherData, setWeather] = useState(null)\r\n    const [country, setCountry] = useState('United States')\r\n    const [err, setErr] = useState(false)\r\n    const [unit, setUnit] = useState('imperial')\r\n\r\n    const hours = (new Date()).getHours()\r\n    const isDayTime = hours > 6 && hours < 20\r\n\r\n    const openWeatherCall = (city) => {\r\n        if(city !== '') {\r\n            fetch(`/openweather/city/${city}/${unit}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if(data.cod == 404) {\r\n                    setErr('City not found')\r\n                } else {\r\n                    setWeather(data)\r\n                }\r\n                //data.name = city name\r\n                //data.sys.country = ISO name\r\n            })\r\n        } else {\r\n            setErr('Please enter a city')\r\n        }\r\n    }\r\n\r\n    const convert = (i) => {\r\n        if(i !== unit && weather !== null) {\r\n            if(i === 'metric') {\r\n                setUnit('imperial')\r\n                const newWeather = weather\r\n                newWeather.data.main.temp = ((Math.floor(newWeather.data.main.temp) * 9) / 5) + 32\r\n                setWeather(newWeather)\r\n            } else {\r\n                setUnit('metric')\r\n                const newWeather = weather\r\n                newWeather.data.main.temp = ((Math.floor(newWeather.data.main.temp) - 32) * 5) / 9\r\n                setWeather(newWeather)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <Head/>\r\n                <Form getWeatherInfo={(city) => openWeatherCall(city)} error={err} setError={setErr} isDayTime={isDayTime}/>\r\n                <Display data={weatherData} unit={unit} setUnit={(unitChange) => convert(unitChange)} isDayTime={isDayTime}/>\r\n            </div>\r\n            <div style={{textAlign: 'center'}} >Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherApp\r\n"]},"metadata":{},"sourceType":"module"}